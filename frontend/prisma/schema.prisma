// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String @id @default(cuid())
  email       String @unique
  name        String?
  password    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  itineraries Itinerary[]
  reservations Reservation[]
  packingLists PackingList[]
}

model Itinerary {
  id          String @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  destination String
  vacationStyle String? // JSON string of vacation style preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  days        Day[]
  reservations Reservation[]
  packingList PackingList?
}

model Day {
  id          String @id @default(cuid())
  date        DateTime
  dayNumber   Int
  activities  String // JSON string of activity objects
  notes       String?
  
  itineraryId String
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}

model Reservation {
  id          String @id @default(cuid())
  type        String // "flight", "hotel", "restaurant", "activity", etc.
  title       String
  description String?
  date        DateTime
  time        String?
  confirmationNumber String?
  cost        Float?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  itineraryId String?
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}

model PackingList {
  id          String @id @default(cuid())
  items       String // JSON string of packing item objects
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  itineraryId String @unique
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
}